{"version":3,"sources":["api.ts","components/TodoList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getPreparedTodos","a","Promise","all","fetch","then","todos","json","users","map","todo","user","find","id","userId","TodoList","className","key","name","title","classnames","item__completed","completed","App","useState","setTodos","loading","setLoading","loadingFirstPage","setLoadingFirstPage","type","onClick","sort","b","localeCompare","setTimeout","Spinner","color","ReactDOM","render","document","getElementById"],"mappings":"mTACMA,EAAW,uCAYJC,EAAgB,uCAAG,kCAAAC,EAAA,sEACDC,QAAQC,IAAI,CAVlCC,MAAM,GAAD,OAAIL,EAAJ,WACTM,MAAK,SAAAC,GAAK,OAAIA,EAAMC,UAIhBH,MAAM,GAAD,OAAIL,EAAJ,WACTM,MAAK,SAAAG,GAAK,OAAIA,EAAMD,YAGO,0CACvBD,EADuB,KAChBE,EADgB,uBAGvBF,EAAMG,KAAI,SAACC,GAChB,OAAO,2BACFA,GADL,IAEEC,KAAMH,EAAMI,MAAK,SAACD,GAAD,OAA0BA,EAAKE,KAAOH,EAAKI,gBANlC,2CAAH,qD,gBCNhBC,EAA4B,SAAC,GAAe,IAAbT,EAAY,EAAZA,MAC1C,OACE,oCACE,wBAAIU,UAAU,cACXV,EAAMG,KAAI,SAAAC,GAAI,OACb,wBACEO,IAAKP,EAAKG,GACVG,UAAU,cAEV,4BAAKN,EAAKC,KAAKO,MACf,2BAAIR,EAAKS,OACT,uBACEH,UAAWI,IAAW,eAAgB,CACpCC,gBAAiBX,EAAKY,aAGvBZ,EAAKY,UAAY,OAAS,qBCwC1BC,EAzDO,WAAO,IAAD,EACAC,mBAA4B,IAD5B,mBACnBlB,EADmB,KACZmB,EADY,OAEID,oBAAkB,GAFtB,mBAEnBE,EAFmB,KAEVC,EAFU,OAGsBH,oBAAkB,GAHxC,mBAGnBI,EAHmB,KAGDC,EAHC,KA0B1B,OACE,oCACE,qDACCD,EAEG,yBAAKZ,UAAU,gBACb,4BAAQc,KAAK,SAASd,UAAU,uBAAuBe,QAlB7C,WAClBN,EAAS,YAAInB,GAAO0B,MAAK,SAAC/B,EAAGgC,GAAJ,OAAUhC,EAAEkB,MAAMe,cAAcD,EAAEd,aAiBnD,iBACA,4BAAQW,KAAK,SAASd,UAAU,sBAAsBe,QAfzC,WACrBN,EAAS,YAAInB,GAAO0B,MAAK,SAAC/B,EAAGgC,GAAJ,OAAUhC,EAAEU,KAAKO,KAAKgB,cAAcD,EAAEtB,KAAKO,YAc5D,iBACA,4BAAQY,KAAK,SAASd,UAAU,wBAAwBe,QAZ7C,WACnBN,EAAS,YAAInB,GAAO0B,MAAK,SAAC/B,EAAGgC,GAAJ,OAAWhC,EAAEqB,WAAaW,EAAEX,gBAW7C,mBAIF,4BAAQQ,KAAK,SAASd,UAAU,0BAA0Be,QAjC5C,WACpBJ,GAAW,GACXQ,YAAW,WACTnC,IAAmBK,MAAK,SAAAK,GAAI,OAAIe,EAASf,MACzCiB,GAAW,GACXE,GAAoB,KACnB,OA4BMH,EAAU,aAAe,cAI9BA,EAEI,yBAAKV,UAAU,WACb,kBAACoB,EAAA,EAAD,CAASC,MAAM,SACf,kBAACD,EAAA,EAAD,CAASC,MAAM,SACf,kBAACD,EAAA,EAAD,CAASC,MAAM,UAGjB,kBAAC,EAAD,CAAU/B,MAAOA,M,MCpD7BgC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.a60b5239.chunk.js","sourcesContent":["\nconst BASE_URL = 'https://jsonplaceholder.typicode.com';\n\nconst getTodos = () => {\n  return fetch(`${BASE_URL}/todos`)\n    .then(todos => todos.json());\n};\n\nconst getUsers = () => {\n  return fetch(`${BASE_URL}/users`)\n    .then(users => users.json());\n};\n\nexport const getPreparedTodos = async () => {\n  const [todos, users] = await Promise.all([getTodos(), getUsers()]);\n\n  return todos.map((todo: TodoFromServer) => {\n    return {\n      ...todo,\n      user: users.find((user: UserFromServer) => user.id === todo.userId),\n    };\n  });\n};\n","import React from 'react';\nimport classnames from 'classnames';\n\ntype Props = {\n  todos: Array<TodosFromServer>;\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <>\n      <ul className=\"todo__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className=\"todo__item\"\n          >\n            <h3>{todo.user.name}</h3>\n            <p>{todo.title}</p>\n            <p\n              className={classnames('item__status', {\n                item__completed: todo.completed,\n              })}\n            >\n              {todo.completed ? 'Done' : 'In Process'}\n            </p>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Spinner } from 'reactstrap';\nimport { getPreparedTodos } from './api';\nimport { TodoList } from './components/TodoList';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<TodosFromServer[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [loadingFirstPage, setLoadingFirstPage] = useState<boolean>(false);\n\n  const downloadTodos = () => {\n    setLoading(true);\n    setTimeout(() => {\n      getPreparedTodos().then(todo => setTodos(todo));\n      setLoading(false);\n      setLoadingFirstPage(true);\n    }, 2000);\n  };\n\n  const sortByTitle = () => {\n    setTodos([...todos].sort((a, b) => a.title.localeCompare(b.title)));\n  };\n\n  const sortByUserName = () => {\n    setTodos([...todos].sort((a, b) => a.user.name.localeCompare(b.user.name)));\n  };\n\n  const sortByStatus = () => {\n    setTodos([...todos].sort((a, b) => +a.completed - +b.completed));\n  };\n\n  return (\n    <>\n      <h1>Dynamic list of TODOs</h1>\n      {loadingFirstPage\n        ? (\n          <div className=\"todo__button\">\n            <button type=\"button\" className=\"button button__title\" onClick={sortByTitle}>Sort By Title</button>\n            <button type=\"button\" className=\"button button__name\" onClick={sortByUserName}>Sort By Title</button>\n            <button type=\"button\" className=\"button button__status\" onClick={sortByStatus}>Sort By Status</button>\n          </div>\n        )\n        : (\n          <button type=\"button\" className=\"button button__loadTodo\" onClick={downloadTodos}>\n            {loading ? 'Loading...' : 'Load Todos'}\n          </button>\n        )}\n      {\n        loading\n          ? (\n            <div className=\"loading\">\n              <Spinner color=\"info\" />\n              <Spinner color=\"info\" />\n              <Spinner color=\"info\" />\n            </div>\n          )\n          : <TodoList todos={todos} />\n      }\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}